# if newMove:
#     move = newMove
#
# moveX = 0
# moveY = 0
#
# for lm in hand_landmark:
#     moveX += lm.x
#     moveY += lm.y
#
# # average center point of hand
# movePos = (moveX / NUM_TOTAL_JOINTS_EACH_HAND, moveY / NUM_TOTAL_JOINTS_EACH_HAND)
#
# # is same registered movement and movement not done yet (or is continuous)
# if lastRegisteredMovement.isSameMove(move) and not lastRegisteredMovement.movementDone:
#     match move:
#         case Move.SPEED_UP:
#             lastRegisteredMovement.times += 1
#             # handleSpeedCommand(1)
#         case Move.SPEED_DOWN:
#             lastRegisteredMovement.times += 1
#             # handleSpeedCommand(-1)
#
#     lastRegisteredMovement.X = movePos[0]
#     lastRegisteredMovement.Y = movePos[1]
#
#
# # is same as last movement (but not registered)
# elif lastMovement.isSameMove(move):
#     match move:
#         # for gestures (not poses), check if the speed is enough to keep registering it as a gesture
#         case [Move.PALM_UP, Move.PALM_DOWN]:
#
#             changeX, changeY = lastMovement.calculatePositionChange(movePos)
#             # hyperparameter REQUIRED_GESTURE_SPEED needs to be adjusted based on camera location
#             if abs(changeY) > REQUIRED_GESTURE_SPEED:
#                 lastMovement.times += 1
#
#         case _:
#             lastMovement.times += 1
#
#     lastMovement.X = movePos[0]
#     lastMovement.Y = movePos[1]
#
#     # register the movement as not just a random swipe, but a gesture/pose intended by the user
#     if lastMovement.times >= MOVEMENT_CHANGE_MARGIN:
#         lastRegisteredMovement.move = move
#         lastRegisteredMovement.times = lastMovement.times
#         lastRegisteredMovement.X = lastMovement.X
#         lastRegisteredMovement.Y = lastMovement.Y
#         match move:
#             case Move.POINT:
#                 # handleStartStopCommands(isStop=False)
#                 pass
#             case Move.STOP:
#                 # handleStartStopCommands(isStop=True)
#                 pass
#
#         lastMovement.movementDone = True
#
# # is completely new movement
# else:
#     lastMovement.move = move
#     lastMovement.times = 1
#     if movePos:
#         lastMovement.X = movePos[0]
#         lastMovement.Y = movePos[1]